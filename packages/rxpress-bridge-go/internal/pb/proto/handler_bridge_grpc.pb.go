// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: proto/handler_bridge.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Invoker_Invoke_FullMethodName = "/bridge.Invoker/Invoke"
)

// InvokerClient is the client API for Invoker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvokerClient interface {
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
}

type invokerClient struct {
	cc grpc.ClientConnInterface
}

func NewInvokerClient(cc grpc.ClientConnInterface) InvokerClient {
	return &invokerClient{cc}
}

func (c *invokerClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvokeResponse)
	err := c.cc.Invoke(ctx, Invoker_Invoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvokerServer is the server API for Invoker service.
// All implementations must embed UnimplementedInvokerServer
// for forward compatibility
type InvokerServer interface {
	Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error)
	mustEmbedUnimplementedInvokerServer()
}

// UnimplementedInvokerServer must be embedded to have forward compatible implementations.
type UnimplementedInvokerServer struct {
}

func (UnimplementedInvokerServer) Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedInvokerServer) mustEmbedUnimplementedInvokerServer() {}

// UnsafeInvokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvokerServer will
// result in compilation errors.
type UnsafeInvokerServer interface {
	mustEmbedUnimplementedInvokerServer()
}

func RegisterInvokerServer(s grpc.ServiceRegistrar, srv InvokerServer) {
	s.RegisterService(&Invoker_ServiceDesc, srv)
}

func _Invoker_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvokerServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invoker_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvokerServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invoker_ServiceDesc is the grpc.ServiceDesc for Invoker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invoker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.Invoker",
	HandlerType: (*InvokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _Invoker_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/handler_bridge.proto",
}

const (
	ControlPlane_Connect_FullMethodName = "/bridge.ControlPlane/Connect"
)

// ControlPlaneClient is the client API for ControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_ConnectClient, error)
}

type controlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneClient(cc grpc.ClientConnInterface) ControlPlaneClient {
	return &controlPlaneClient{cc}
}

func (c *controlPlaneClient) Connect(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[0], ControlPlane_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &controlPlaneConnectClient{ClientStream: stream}
	return x, nil
}

type ControlPlane_ConnectClient interface {
	Send(*Control) error
	Recv() (*Control, error)
	grpc.ClientStream
}

type controlPlaneConnectClient struct {
	grpc.ClientStream
}

func (x *controlPlaneConnectClient) Send(m *Control) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlPlaneConnectClient) Recv() (*Control, error) {
	m := new(Control)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlPlaneServer is the server API for ControlPlane service.
// All implementations must embed UnimplementedControlPlaneServer
// for forward compatibility
type ControlPlaneServer interface {
	Connect(ControlPlane_ConnectServer) error
	mustEmbedUnimplementedControlPlaneServer()
}

// UnimplementedControlPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServer struct {
}

func (UnimplementedControlPlaneServer) Connect(ControlPlane_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedControlPlaneServer) mustEmbedUnimplementedControlPlaneServer() {}

// UnsafeControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServer will
// result in compilation errors.
type UnsafeControlPlaneServer interface {
	mustEmbedUnimplementedControlPlaneServer()
}

func RegisterControlPlaneServer(s grpc.ServiceRegistrar, srv ControlPlaneServer) {
	s.RegisterService(&ControlPlane_ServiceDesc, srv)
}

func _ControlPlane_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlPlaneServer).Connect(&controlPlaneConnectServer{ServerStream: stream})
}

type ControlPlane_ConnectServer interface {
	Send(*Control) error
	Recv() (*Control, error)
	grpc.ServerStream
}

type controlPlaneConnectServer struct {
	grpc.ServerStream
}

func (x *controlPlaneConnectServer) Send(m *Control) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlPlaneConnectServer) Recv() (*Control, error) {
	m := new(Control)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlPlane_ServiceDesc is the grpc.ServiceDesc for ControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.ControlPlane",
	HandlerType: (*ControlPlaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _ControlPlane_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/handler_bridge.proto",
}
